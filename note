#!/usr/bin/env bash

# shellcheck source="${XDG_CONFIG_HOME:-$HOME/.config}/notekeeper/noterc"
# shellcheck disable=SC1091

YEAR=$(date +'%Y')
MONTH=$(date +'%m')
DAY=$(date +'%d')

# Set default configuration
NOTE_DIR="$HOME/notes"
BASE_NOTE_DIR=$NOTE_DIR
NOTE_NAME="$YEAR-$MONTH-$DAY.md"
PRINT_TOOL="cat"

# Overwrite default configs from noterc configuration file
NOTERC="${XDG_CONFIG_HOME:-$HOME/.config}/notekeeper/noterc"
if [ -f "$NOTERC" ]; then source "$NOTERC"; fi

NOTE_DIR="$NOTE_DIR/$YEAR/$MONTH/$DAY"

create_note() {
    if [ ! -f "$NOTE_DIR/$NOTE_NAME" ]; then
        mkdir -p "$NOTE_DIR"
        touch "$NOTE_DIR/$NOTE_NAME"
        printf "%s-%s-%s\n---\n\n" "$DAY" "$MONTH" "$YEAR" > "$NOTE_DIR/$NOTE_NAME"
        printf "Created new note: %s/%s\n" "$NOTE_DIR" "$NOTE_NAME"
    fi
}

print_help() {
    printf "note - Note Keeper 0.6.0 (27 March 2021)

Usage: note [arguments]

Arguments:
  -h | --help                         Display usage guide.
  -e | --edit <FILENAME>              Open a specific note for editing.
  -p | --print                        Print the contents of a note.
  -c | --create                       Create a note but don't open it for editing.
  -n | --name <FILENAME>              Set filename for note. Will be created in \$NOTE_DIR
                                      Don't forget an extension like .md
  -t | --time                         Add a timestamp when opening a note.

The script loads configuration variables from \${XDG_CONFIG_HOME:-\$HOME/.config}/notekeeper/noterc.

Example:
# Directory where the current note should be stored
NOTE_DIR=\"\$HOME/notes/\$YEAR/\$MONTH\"

# Name of the Note
NOTE_NAME=\"\$DAY.md\"\n"
}

open_note() {
    printf "Opening note: %s\n" "$1"
    if [[ $EDITOR = *"vim"* ]] || [[ $EDITOR = *"nvim"* ]]; then
        # Open Vim or Neovim in insert mode.
        $EDITOR "+normal G$" +startinsert! "$1"
    elif [[ $EDITOR = *"emacs"* ]]; then
        # Open Emacs with cursor at EOF.
        emacs -nw "$1" --eval "(goto-char (point-max))"
    elif [[ $EDITOR = "" ]]; then
        # If no default editor, use Vim and open in insert mode.
        vim "+normal G$" +startinsert! "$1"
    else
        $EDITOR "$1"
    fi
}

edit_note() {
  if [ "$(find "$BASE_NOTE_DIR" -name "$1" | wc -l)" -gt 1 ]; then
      printf "Error: More than one note with that name was found.\n"
      printf "Please edit note(s) manually with your editor of choice.\n"
      exit 1
  elif [ "$(find "$BASE_NOTE_DIR" -name "$1" | wc -l)" -eq 0 ]; then
      printf "Unable to find a note with that name.\n"
      exit 1
  else
      open_note "$(find "$BASE_NOTE_DIR" -name "$1")"
  fi
}

openNote=false
printNoteOnly=false
createNoteOnly=false

if (($# > 0)); then
    while [[ $# -gt 0 ]]; do
        key="$1"
        case $key in
        -e | --edit)
            if [ "$#" -ne 2 ]; then
                printf "Incorrect number of arguments.\n"
                printf "Use \"note --help\" to see usage information.\n"
                exit 1
            fi
            NOTE_NAME="$2"
            if [ -z "$NOTE_NAME" ]; then
                printf "Expected additional argument <Note Filename>.\n"
                exit 1
            else
                edit_note "$NOTE_NAME"
            fi
            exit 0
            ;;
        -p | --print)
            printNoteOnly=true
            shift
            ;;
        -c | --create)
            createNoteOnly=true
            shift
            ;;
        -n | --name)
            NOTE_NAME="$2"
            openNote=true
            if [ -z "$NOTE_NAME" ]; then
                printf "Expected additional argument <Note Filename>.\n"
                exit 1
            fi
            shift
            shift
            ;;
        -h | --help)
            print_help
            exit 0
            ;;
        -t | --time)
            addTimeStamp=true
            openNote=true
            shift
            ;;
        *)
            printf "Unknown Argument \"%s\"\n" "$1"
            printf "Use \"note --help\" to see usage information.\n"
            exit 1
            ;;
        esac
    done
else
    #no arguments/options, just open the default note.
    openNote=true
fi

if [ "$printNoteOnly" = true ]; then
    $PRINT_TOOL "$NOTE_DIR/$NOTE_NAME"
    exit 0
fi

if [ "$createNoteOnly" = true ]; then
    create_note
    exit 0
fi

if [ "$addTimeStamp" = true ]; then
    printf "[%s]\n" "$(date +%T)" >> "$NOTE_DIR/$NOTE_NAME"
fi

if [ "$openNote" = true ]; then
    create_note
    open_note "$NOTE_DIR/$NOTE_NAME"
fi
